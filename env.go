package main

import (
	"bufio"
	"errors"
	"io"
	"os"
	"os/exec"
	"strings"
	"text/template"
)

var (
	envTemplateUnix string
)

func init() {
	envTemplateUnix = `
########################################
#
# This file is generated by goautoenv
#
# Please do not change this file.
#

ENV_DIR={{.Root}}

GOPATH_OLD=${GOPATH}
GOPATH=${ENV_DIR}/.envspace
export GOPATH

GOPACKAGE_OLD=${GOPACKAGE}
GOPACKAGE={{.Package}}
export GOPACKAGE

_GOAUTOENV_WORKSPACE=${GOPATH}/src/${GOPACKAGE}

_OLD_GOAUTOENV_PS1="$PS1"
PS1="($GOPACKAGE)\n$PS1"

_GOAUTOENV_GODEP=$(which godep)

godep () {
  pushd $_GOAUTOENV_WORKSPACE > /dev/null 2>&1
  $_GOAUTOENV_GODEP $@
  popd > /dev/null 2>&1
}

deactivate () {
  GOPATH=$GOPATH_OLD
  export GOPATH
  GOPACKAGE=$GOPACKAGE_OLD
  export GOPACKAGE
  PS1=$_OLD_GOAUTOENV_PS1
  export PS1

  unset -f deactivate
  unset -f godep
  unset _GOAUTOENV_GODEP
}
`
}

type Env struct {
	Package string
	Root    string
}

func LoadEnvfile() (*Env, error) {
	root, e := getRoot()
	if e != nil {
		return nil, e
	}

	env_path := strings.Join([]string{root, ".env"}, "/")
	fi, e := os.OpenFile(env_path, os.O_RDONLY, os.ModePerm)
	if e != nil {
		return nil, e
	}

	env := new(Env)

	r := bufio.NewReader(fi)
	for true {
		line, e := r.ReadString('\n')
		if e != nil {
			break
		}
		switch {
		case strings.HasPrefix(line, "ENV_DIR"):
			env.Root = strings.SplitN(line, "=", 1)[1]
			break
		case strings.HasPrefix(line, "GOPACKAGE"):
			env.Package = strings.SplitN(line, "=", 1)[1]
			break
		}
	}

	if env.Package == "" {
		return env, errors.New("Package name is empty. it looks like broken .env file")
	}

	return env, nil
}

func getRoot() (string, error) {
	cmd := exec.Command("git", "rev-parse", "--show-toplevel")
	out, e := cmd.StdoutPipe()
	e = cmd.Run()
	if e != nil {
		return "", e
	}
	path := make([]byte, 512)
	_, e = out.Read(path)
	if e != nil {
		return "", e
	}
	return string(path), nil
}

func (env *Env) WriteEnvFile(writer io.Writer) error {
	t := template.New("env_script")
	t.Parse(envTemplateUnix)
	return t.Execute(writer, env)
}
